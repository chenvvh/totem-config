//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&lt { flavor = "hold-preferred"; };

&sk { release-after-ms = <1200>; };

/ {
    combos {
        compatible = "zmk,combos";

        lgui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <13 24>;
            timeout-ms = <18>;
            slow-release;
        };

        lalt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <12 23>;
            timeout-ms = <18>;
            slow-release;
        };

        lcontrol {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <22 11>;
            timeout-ms = <18>;
            slow-release;
        };

        lshift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <10 21>;
            timeout-ms = <18>;
            slow-release;
        };

        rshift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <30 19>;
            timeout-ms = <18>;
            slow-release;
        };

        control {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <29 18>;
            timeout-ms = <18>;
            slow-release;
        };

        alt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <28 17>;
            timeout-ms = <18>;
            slow-release;
        };

        rgui {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <27 16>;
            timeout-ms = <18>;
            slow-release;
        };

        unused {
            bindings = <&kp A>;
            key-positions = <5 6 7 8 15 26 9 31>;
            timeout-ms = <18>;
        };

        next_tab {
            bindings = <&kp LC(TAB)>;
            key-positions = <13 3>;
            timeout-ms = <18>;
        };

        previous_tab {
            bindings = <&kp LC(LS(TAB))>;
            key-positions = <12 2>;
            timeout-ms = <18>;
        };

        close {
            bindings = <&kp LG(W)>;
            key-positions = <11 1>;
            timeout-ms = <18>;
        };

        quit {
            bindings = <&kp LG(Q)>;
            key-positions = <10 0>;
            timeout-ms = <18>;
        };

        new_tab {
            bindings = <&kp LG(T)>;
            key-positions = <4 14>;
            timeout-ms = <18>;
        };

        undotab {
            bindings = <&kp LG(LS(T))>;
            key-positions = <4 3>;
            timeout-ms = <18>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <24 23>;
            timeout-ms = <18>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <22 23>;
            timeout-ms = <18>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <22 21 23>;
            timeout-ms = <18>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <21 22>;
            timeout-ms = <18>;
        };

        redo {
            bindings = <&kp LG(LS(Z))>;
            key-positions = <20 21>;
            timeout-ms = <18>;
        };

        lb {
            bindings = <&LB 0 0>;
            key-positions = <13 12 11>;
        };

        refresh {
            bindings = <&kp LG(R)>;
            key-positions = <3 2>;
        };

        all {
            bindings = <&kp LG(A)>;
            key-positions = <10 20>;
        };
    };

    behaviors {
        sh: sh {
            compatible = "zmk,behavior-hold-tap";
            label = "SH";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            hold-while-undecided;
            hold-while-undecided-linger;
            flavor = "tap-preferred";
        };

        comma: comma {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        period: period {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        question: question {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        LB: LB {
            compatible = "zmk,behavior-hold-tap";
            label = "LB";
            bindings = <&lb2>, <&lb1>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
        };

        slt: slt {
            compatible = "zmk,behavior-hold-tap";
            label = "SLT";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };
    };

    macros {
        lb2: double_control {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp LEFT_GUI>;
            label = "DOUBLE_CONTROL";
        };

        lb1: lb1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE)>;
            label = "LB1";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base {
            bindings = <
                              &kp Q  &kp W  &kp E               &kp R        &kp T        &kp Y                  &kp U      &kp I   &kp O    &kp P
                              &kp A  &kp S  &kp D               &kp F        &kp G        &kp H                  &kp J      &kp K   &kp L    &kp SINGLE_QUOTE
&kp LS(LC(LA(LEFT_COMMAND)))  &kp Z  &kp X  &kp C               &kp V        &kp B        &kp N                  &kp M      &comma  &period  &question         &kp RS(RA(RC(RIGHT_GUI)))
                                            &lt 3 C_PLAY_PAUSE  &lt 1 ENTER  &kp SPACE    &mt RIGHT_SHIFT SPACE  &lt 2 TAB  &mo 4
            >;
        };

        L1 {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃           ┃           ┃     UP    ┃           ┃     {     ┃   ┃     }     ┃     7     ┃     8     ┃     9     ┃     +     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃   SHIFT   ┃   LEFT    ┃    DOWN   ┃   RIGHT   ┃     [     ┃   ┃     ]     ┃     4     ┃     5     ┃     6     ┃     -     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃           ┃   P UP    ┃  C LOCK   ┃  P DOWN   ┃     (     ┃   ┃     )     ┃     1     ┃     2     ┃     3     ┃     *     ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃    TAB    ┃    SPC    ┃   ┃    DEL    ┃     0     ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
                   &kp LA(BACKSPACE)   &kp BACKSPACE  &kp UP          &kp DELETE     &kp LA(DELETE)    &kp N5            &kp N6          &kp N7           &kp N8    &kp N9
                   &kp LA(LEFT_ARROW)  &kp LEFT       &kp DOWN        &kp RIGHT      &kp LA(RIGHT)     &kp N0            &kp N1          &kp N2           &kp N3    &kp N4
&kp LG(BACKSPACE)  &kp ESCAPE          &kp LG(LEFT)   &kp LEFT_SHIFT  &kp LG(RIGHT)  &kp ENTER         &kp EQUAL         &kp PLUS        &kp MINUS        &kp STAR  &kp FSLH  &kp CARET
                                                      &trans          &trans         &trans            &kp LEFT_CONTROL  &kp LEFT_SHIFT  &mt LG(Q) LG(W)
            >;
        };

        R1 {
            bindings = <
           &kp GRAVE       &kp EXCLAMATION       &kp AT_SIGN            &kp UNDERSCORE    &kp AMPERSAND    &kp N5       &kp N6    &kp N7      &kp N8    &kp N9
           &kp LEFT_BRACE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp RIGHT_BRACE   &kp PIPE         &kp N0       &kp N1    &kp N2      &kp N3    &kp N4
&kp TILDE  &kp LESS_THAN   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GREATER_THAN  &kp BACKSLASH    &kp PERCENT  &kp PLUS  &kp MINUS   &kp STAR  &kp FSLH  &kp CARET
                                                 &trans                 &trans            &trans           &kp EQUAL    &kp HASH  &kp DOLLAR
            >;
        };

        L2 {
            bindings = <
        &trans  &trans            &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans    &kp F1   &kp F2   &kp F3   &kp F4   &kp F5
        &trans  &kp C_MUTE        &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &trans    &kp F6   &kp F7   &kp F8   &kp F9   &kp F10
&trans  &trans  &kp C_PLAY_PAUSE  &kp C_PREVIOUS        &kp C_NEXT            &trans    &kp F11  &kp F12  &kp F13  &kp F14  &kp F15  &trans
                                  &trans                &trans                &trans    &trans   &trans   &trans
            >;
        };

        R2 {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &kp A   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        L3 {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃   RESET   ┃ BT CLEAR  ┃  OUT TOG  ┃           ┃           ┃   ┃           ┃    F7     ┃    F8     ┃    F9     ┃    F12    ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃ BOOTLOAD  ┃ BT NEXT   ┃           ┃           ┃           ┃   ┃           ┃    F4     ┃    F5     ┃    F6     ┃    F11    ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃           ┃ BT PREV   ┃           ┃           ┃           ┃   ┃           ┃    F1     ┃    F2     ┃    F3     ┃    F10    ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃           ┃           ┃   ┃           ┃           ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans
            &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &kp A         &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        R3 {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &kp A   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &studio_unlock
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        L3 {
            if-layers = <1 3>;
            then-layer = <5>;
        };

        R3 {
            if-layers = <2 6>;
            then-layer = <6>;
        };
    };
};
